// 구슬탈출 2
#include <stdio.h>

const int MAX=12;
int dy[5]={0,-1,0,1,0};
int dx[5]={0,0,-1,0,1};
int arr[MAX][MAX];
int N,M;
bool flagR,flagB;
bool movePossible;
int mincnt=11;

struct P{
	int y;
	int x;
};

struct P Blue;
struct P Red;

void move(int Ry,int Rx,int By,int Bx,int dir,int cnt){
	if(cnt>10) 	return;	
	for(int i=1;i<5;i++){ //동서남북 이동  
		if(dir>0 && dir%2==i%2) continue; 
		int Rny=Ry+dy[i];
		int Rnx=Rx+dx[i];
		int Bny=By+dy[i];
		int Bnx=Bx+dx[i];
		int tempRy=Ry,tempRx=Rx,tempBy=By,tempBx=Bx;
		//	빨간공 움직이기 
		if(arr[Rny][Rnx]==-1){
			movePossible=false;
			tempRy=Rny;
			tempRx=Rnx;
			flagR=true;
		}
		else if(arr[Rny][Rnx]==1 && (Rny!=tempBy || Rnx!=tempBx)){
			movePossible=true;
			while(1){
				tempRy=Rny;
				tempRx=Rnx;
				Rny=tempRy+dy[i];
				Rnx=tempRx+dx[i];
				if(arr[Rny][Rnx]==0 || (Rny==tempBy && Rnx==tempBx)) break;
				else if(arr[Rny][Rnx]==-1){
					flagR=true;
					tempRy=Rny;
					tempRx=Rnx;
					movePossible=false;
					break;
				}
			}
		}
		//파란공 움직이기 
		if(arr[Bny][Bnx]==-1){
			movePossible=false;
			continue; 
		}
		else if(arr[Bny][Bnx]==1 && (Bny!=tempRy || Bnx!=tempRx)){
			movePossible=true;
			while(1){
				tempBy=Bny;
				tempBx=Bnx;
				Bny=tempBy+dy[i];
				Bnx=tempBx+dx[i];
				if(arr[Bny][Bnx]==-1){
					flagB=true;
					tempBy=Bny;
					tempBx=Bnx;
					movePossible=false;
					break;
				}
				else if(arr[Bny][Bnx]==0 || (Bny==tempRy && Bnx==tempRx)) break;
			}
		} 
		// 다시 빨간공 움직이기 (파란공 움직이고 나서 공간 생겼을 수도 있으니까) 
		if(arr[Rny][Rnx]==1 && (Rny!=tempBy || Rnx!=tempBx)){
			movePossible=true;
			while(1){
				tempRy=Rny;
				tempRx=Rnx;
				Rny=tempRy+dy[i];
				Rnx=tempRx+dx[i];
				if(arr[Rny][Rnx]==-1){
					flagR=true;
					tempRy=Rny;
					tempRx=Rnx;
					movePossible=false;
					break;
				}
				else if(arr[Rny][Rnx]==0 || (Rny==tempBy && Rnx==tempBx)) break;
			}	
		}
		//빨간공만 들어가면 최소 이동값 업데이트  
		if(flagR==true && flagB==false){
			if(mincnt>cnt) mincnt=cnt;
			flagR=false;
			continue;
		}
		flagR=false;
		flagB=false;
		 
		if(movePossible==true){
			movePossible=false;
			move(tempRy,tempRx,tempBy,tempBx,i,cnt+1);
		}
	}	
}

int main(){
	scanf("%d %d",&N,&M);
	for(int i=1;i<=N;i++){
		for(int j=1;j<=M;j++){
			char temp;
			scanf(" %c",&temp);
			if(temp=='#') arr[i][j]=0;
			else if(temp=='.') arr[i][j]=1;
			else if(temp=='O') arr[i][j]=-1;
			else if(temp=='B') {
				arr[i][j]=1;
				Blue.y=i;
				Blue.x=j;
			}
			else if(temp=='R') {
				arr[i][j]=1;
				Red.y=i;
				Red.x=j;
			}
		}
	}
	move(Red.y,Red.x,Blue.y,Blue.x,0,1);
	if(mincnt<11) printf("%d",mincnt);
	else printf("-1");
	return 0;
}


// DFS로 풀었음. 
// 1.빨간 공 움직인다.
//   1.1 빨간 공이 구멍에 빠지면 flag 표시해준다. 
//   1.2 빨간공을 끝까지 이동시킨 위치에서  다음 이동할 수 있는 방향이 있는지 확인 
// 2.파란 공 움직인다.
//   2.1 파란 공이 구멍에 빠지면 바로 다음 이동 방향으로 넘어간다. (결과는 무조건 -1이니까) 
//   2.2 파란공을 끝까지 이동시킨 위치에서 다음 이동할 수 있는 방향이 있는지 확인 
// 3.빨간 공을 움직인다. (파란 공이 움직이고 나서 공간이 생겼을 수 있으니까.)
// 4.빨간공만 구멍에 빠졌다면 이동 횟수 최소인지 확인 후 업데이트 
// 5.빨간공과 파란공을 끝까지 움직인 위치에서 이동할 수 있는 방향이 있다면 현재 위치,방향,이동횟수 재귀함수 호출 
